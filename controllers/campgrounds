const Campground = require('../models/campground');
const ExpressError = require('../utils/ExpressError');
const {cloudinary} =require('../cloudinary/index')

const maptilerClient = require("@maptiler/client");
maptilerClient.config.apiKey = process.env.MAPTILER_KEY;


module.exports.index=async(req,res)=>{
    const campgrounds=await Campground.find({});
    res.render('campgrounds/index', { campgrounds } )
}
module.exports.renderNewForm=(req, res) => {
    res.render('campgrounds/new');
}
module.exports.createCampground=async(req,res)=>{
       //   if(!req.body.campground) throw new ExressError('Invalid Data',400)
     //   basic error handling

    const geoData = await maptilerClient.geocoding.forward(
        req.body.campground.location,
        { limit: 1 });
    const newCampground = new Campground(req.body.campground);
    newCampground.geometry = geoData.features[0].geometry;
    newCampground.images=req.files.map(f=>({url:f.path,filename:f.filename}))
    newCampground.author=req.user._id;
    await newCampground.save();
    req.flash('success','successfully made a new campground!')
    res.redirect(`/campgrounds/${newCampground._id}`)
    
}
module.exports.showCampground=async(req,res,)=>{
    
    const campground =await Campground.findById(req.params.id).populate({
        path:'reviews',
    populate:{
        path:'author'
    }
    }).populate('author')
    if(!campground){
        req.flash('error','cannot find that campground :(');
         return res.redirect('/campgrounds')
    }
    res.render('campgrounds/show', { campground } )
}
module.exports.renderEditForm=async(req,res)=>{
    const { id } = req.params;
    const campground =await Campground.findById(id)
    if (!campground) {
        throw new ExpressError('Campground Not Found', 404);
       
    }
    res.render('campgrounds/edit', { campground } )
}
module.exports.updateCampground=async (req, res) => {
    console.log("Updating campground with id:", req.params.id, { new: true });
    const { id } = req.params;
    const campground = await Campground.findByIdAndUpdate(id, req.body.campground);
    const geoData = await maptilerClient.geocoding.forward(req.body.campground.location, { limit: 1 });
    campground.geometry = geoData.features[0].geometry;
    const imgs=req.files.map(f=>({url:f.path,filename:f.filename}))
    campground.images.push(...imgs)
    await campground.save()
    if(req.body.deleteImages){
        for(let filename of req.body.deleteImages){
            await cloudinary.uploader.destroy(filename)
        }
        await campground.updateOne({$pull:{images:{filename:{$in:req.body.deleteImages}}}})
    }
    req.flash('success','successfully edited campground!')
    res.redirect(`/campgrounds/${campground._id}`);
}
module.exports.destroyCampground=async(req,res)=>{
    const{id}=req.params;
    await Campground.findByIdAndDelete(id);
    req.flash('success','successfully deleted campground!')
    res.redirect('/campgrounds');
}